"""A simple client to interact with Huggingface Inference APIs."""

import json
from typing import Dict, Optional

from requests.sessions import Session

from prefect_huggingface.exceptions import HuggingfaceInferenceAPIFailure


class HuggingfaceClient:
    """
    Client to interact with Hugginface Inference API.

    Attributes:
        access_token (str): Access token to authenticate with Huggingface Inference API.
    """

    def __init__(self, access_token: str) -> None:
        self.access_token = access_token
        self.inferece_api_base_url = "https://api-inference.huggingface.co"

    def __get_model_url(self, model_id: str) -> str:
        """
        Private method to build the model URL given the model identifier.
        """
        return f"{self.inferece_api_base_url}/models/{model_id}"

    def __get_session(self) -> Session:
        """
        Private method to build a `Session` object to interact with
            Huggingface Inference API.
        """
        session = Session()
        session.headers = {"Authorization": f"Bearer {self.access_token}"}

        return session

    def get_inference_result(
        self,
        model_id: str,
        inputs: str,
        options: Optional[Dict],
        parameters: Optional[Dict],
    ) -> Dict:
        """
        Returns the response generated by Huggingface Inference API.
        Only `inputs` is required, as specified in the [Huggingface Inference API docs.](https://huggingface.co/docs/api-inference/detailed_parameters) # noqa
        `options` and `parameters` maybe be used based on the choosen model.

        Attributes:
            model_id (str): The identifier of the model to use.
            inputs (str): The input string to provide to the model.
            options (Optional[Dict]): Options to pass to the API for the given model.
            parameters (Optional[Dict]): Parameters to pass to the API for the given model.
        """
        url = self.__get_model_url(model_id=model_id)
        session = self.__get_session()
        data = {"inputs": inputs}
        if options:
            data["options"] = options
        if parameters:
            data["parameters"] = parameters

        with session.post(url=url, data=json.dumps(data)) as response:
            if response.status_code != 200:
                msg = f"There was an error while retrieving result from Huggingface Inference API. Error is: {response.reason}"  # noqa
                raise HuggingfaceInferenceAPIFailure(msg)
            else:
                return json.loads(response.content.decode("utf-8"))
